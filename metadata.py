"""
The purpose of this file is to define the metadata of the app with minimal imports. 

DO NOT CHANGE the name of the file
"""

from mmif import DocumentTypes, AnnotationTypes

from clams.app import ClamsApp
from clams.appmetadata import AppMetadata
import re

labelMapPresets = {}
swt_4way_mapping = [
    "B:bars",
    "S:slate", "S-H:slate", "S-C:slate", "S-D:slate", "S-G:slate",
    "I:chyron", "N:chyron", "Y:chyron",
    "C:credits", "R:credits",
]
labelMapPresets['swt-v4-4way'] = swt_4way_mapping
swt_6way_mapping = swt_4way_mapping.copy() \
                   + ["E:other_text", "K:other_text", "G:other_text", "T:other_text", "F:other_text",
                      "W:other_opening", "L:other_opening", "O:other_opening", "M:other_opening"]
labelMapPresets['swt-v4-6way'] = swt_6way_mapping

labelMapPresetsMarkdown = '\n'.join([f"- `{k}`: `{str(v)}`" for k, v in labelMapPresets.items()])


# DO NOT CHANGE the function name 
def appmetadata() -> AppMetadata:
    """
    Function to set app-metadata values and return it as an ``AppMetadata`` obj.
    Read these documentations before changing the code below
    - https://sdk.clams.ai/appmetadata.html metadata specification. 
    - https://sdk.clams.ai/autodoc/clams.appmetadata.html python API
    
    :return: AppMetadata object holding all necessary information.
    """
    
    # first set up some basic information
    metadata = AppMetadata(
        name="Role Filler Binder",
        description="For identification and linking of named entities to their roles in OCR-based text.",  # briefly describe what the purpose and features of the app
        app_license="Apache 2.0",  # short name for a software license like MIT, Apache2, GPL, etc.
        identifier="role-filler-binder",  # should be a single string without whitespaces. If you don't intent to publish this app to the CLAMS app-directory, please use a full IRI format. 
        url="https://github.com/clamsproject/app-role-filler-binder",  # a website where the source code and full documentation of the app is hosted
        analyzer_version=[l.strip().rsplit('==')[-1] for l in open('requirements.txt').readlines() if re.match(r'^transformers==', l)][0],
        analyzer_license="Apache 2.0",  # short name for a software license
    )
    # and then add I/O specifications: an app must have at least one input and one output
    in_al = metadata.add_input(AnnotationTypes.Alignment)
    in_al.add_description('Alignment annotation between a TimePoint and a TextDocument.')
    in_td = metadata.add_input(DocumentTypes.TextDocument)
    in_td.add_description('Serialized text content generated by an OCR tool.')
    in_tp = metadata.add_input(AnnotationTypes.TimePoint)
    in_tp.add_description('A labeled time point annotation generated by SWT or a similar app.')
    out_td = metadata.add_output(DocumentTypes.TextDocument, **{'@lang': 'en'})
    out_td.add_description('CSV-formatted text document.')
    out_al = metadata.add_output(AnnotationTypes.Alignment)
    out_al.add_description(
        'Secondary alignment linking the original alignment (TimePoint -> OCR TextDocument) to a new RFB TextDocument.'
    )

    metadata.add_parameter(
        name='labelMapPreset', type='string', default='swt-v4-4way',
        choices=list(labelMapPresets.keys()),
        description=f'preset of label mappings. Uses the swt 4-way mapping by default.'
                    f'Custom labels are currently not supported. '
                    f'Available presets are:\n{labelMapPresetsMarkdown}'
    )
    
    return metadata


# DO NOT CHANGE the main block
if __name__ == '__main__':
    import sys
    metadata = appmetadata()
    for param in ClamsApp.universal_parameters:
        metadata.add_parameter(**param)
    sys.stdout.write(metadata.jsonify(pretty=True))
